using Microsoft.VisualStudio.TestTools.UnitTesting;
using Reqnroll.TestProjectGenerator;

namespace Reqnroll.SystemTests.Generation;

/// <summary>
/// The purpose of these tests to verify that the tests generated by the
/// MsTest generator compile and can execute with MsTest.
/// </summary>
[TestClass]
[TestCategory("MsTest")]
public class MsTestGenerationTest : GenerationTestBase
{
    protected override void TestInitialize()
    {
        base.TestInitialize();
        _testRunConfiguration.UnitTestProvider = UnitTestProvider.MSTest;
    }

    /// <summary>
    /// MsTest v2.* defines the [DataRow] attribute with a ctor that cannot handle if the second
    /// parameter of the attribute is a string[]. This causes problems with single-column examples,
    /// because in this case the second parameter is a list of example block tags passed in as string[].
    /// </summary>
    [TestMethod]
    public void Generator_handles_tagged_examples_block_with_single_column()
    {
        AddScenario(
            """
            Scenario Outline: Sample Scenario Outline
                When <what> happens
            @example_tag
            Examples:
                | what |
                | foo  |
                | bar  |
            Examples: Second example without tags - in this case the tag list is null.
                | what |
                | baz  |
            """);
        _projectsDriver.AddPassingStepBinding();

        ExecuteTests();

        ShouldAllScenariosPass(3);
    }

    [TestMethod]
    public void Scenario_level_parallelisation()
    {
        _projectsDriver.EnableTestParallelExecution();

        AddBindingClass(
            """
            using Reqnroll;
            using Reqnroll.Tracing;
            using System.Collections.Concurrent;
            using System.Diagnostics;
            using FluentAssertions;

            [Binding]
            public class TraceSteps
            {
                sealed class RunData
                {
                    public Stopwatch Duration { get; } = Stopwatch.StartNew();
                    public volatile int StepCount;
                    public ConcurrentDictionary<FeatureContext, byte> FeatureContexts { get; } = new ConcurrentDictionary<FeatureContext, byte>();
                    public ConcurrentDictionary<ScenarioContext, byte> ScenarioContexts { get; } = new ConcurrentDictionary<ScenarioContext, byte>();
                    public ConcurrentDictionary<TraceSteps, byte> BindingInstances { get; } = new ConcurrentDictionary<TraceSteps, byte>();
                }

                private static RunData _RunData;
                private readonly ITraceListener _traceListener;
                private readonly ITestRunner _testRunner;
                private volatile int _ScenarioLocalCounter;

                public TraceSteps(ITraceListener traceListener, ITestRunner testRunner)
                {
                    _traceListener = traceListener;
                    _testRunner = testRunner;

                    Interlocked.Increment(ref _ScenarioLocalCounter);
                }

                [BeforeTestRun]
                static void BeforeTestRun()
                {
                    _RunData = new RunData();

                    Log.LogHook();
                }

                [AfterTestRun]
                static void AfterTestRun()
                {
                    var runData = _RunData;
                    runData.Duration.Stop();
                    runData.FeatureContexts.Count.Should().Be(10, because: "One FeatureContext for each test is created");
                    runData.ScenarioContexts.Count.Should().Be(10, because: "One ScenarioContext for each test is created");
                    runData.BindingInstances.Count.Should().Be(10, because: "One binding instance for each test is created");
                    runData.Duration.ElapsedMilliseconds.Should().BeLessThan(9 * WaitTimeInMS, because: "Test should be processed (parallel) in time");

                    Log.LogHook();
                }

                [BeforeFeature]
                static void BeforeFeature(FeatureContext featureContext, ITestRunner testRunner)
                {
                    testRunner.ScenarioContext.Should().BeNull();
                    var runData = _RunData;
                    runData.FeatureContexts.TryAdd(featureContext, 1);
                    Log.LogHook();
                }

                static RunData GetFeatureData(FeatureContext featureContext) => _RunData;
                const int WaitTimeInMS = 1_000;

                [AfterFeature]
                static void AfterFeature(FeatureContext featureContext, ITestRunner testRunner)
                {
                    testRunner.ScenarioContext.Should().BeNull();
                    var runData = _RunData;
                    runData.FeatureContexts.TryAdd(featureContext, 1);
                    Log.LogHook();
                }

                [When(@"I do something in Scenario '(.*)'")]
                void WhenIDoSomething(string scenario)
                {
                    _testRunner.ScenarioContext.Should().NotBeNull();
                    _testRunner.ScenarioContext.ScenarioInfo.Title.Should().Be(scenario);

                    Interlocked.Increment(ref _ScenarioLocalCounter);
                    _ScenarioLocalCounter.Should().Be(2);

                    var runData = _RunData;
                    runData.FeatureContexts.TryAdd(_testRunner.FeatureContext, 1);
                    runData.ScenarioContexts.TryAdd(_testRunner.ScenarioContext, 1);
                    runData.BindingInstances.TryAdd(this, 1);
                    var currentStartIndex = Interlocked.Increment(ref runData.StepCount);
                    _traceListener.WriteTestOutput($"Start index: {currentStartIndex}, Worker: {_testRunner.TestWorkerId}");
                    Thread.Sleep(WaitTimeInMS);
                    var afterStartIndex = runData.StepCount;
                    if (afterStartIndex == currentStartIndex)
                    {
                        _traceListener.WriteTestOutput("Was not parallel");
                    }
                    else
                    {
                        _traceListener.WriteTestOutput("Was parallel");
                    }
                }
            }
            """);

        AddFeatureFile(
            """
            Feature: Feature 1
            Scenario Outline: Simple Scenario Outline 1
                When I do something in Scenario 'Simple Scenario Outline 1'

            Examples:
                | Count |
                | 1     |
                | 2     |
                | 3     |
            
            Scenario Outline: Simple Scenario Outline 2
                When I do something in Scenario 'Simple Scenario Outline 2'
            
            Examples:
                | Count |
                | 1     |
                | 2     |
                | 3     |
            
            Scenario Outline: Simple Scenario Outline 3
                When I do something in Scenario 'Simple Scenario Outline 3'
            
            Scenario Outline: Simple Scenario Outline 4
                When I do something in Scenario 'Simple Scenario Outline 4'
            
            Scenario Outline: Simple Scenario Outline 5
                When I do something in Scenario 'Simple Scenario Outline 5'
            
            Scenario Outline: Simple Scenario Outline 6
                When I do something in Scenario 'Simple Scenario Outline 6'
            """);

        ExecuteTests();

        ShouldAllScenariosPass(10);

        _vsTestExecutionDriver.CheckAnyOutputContainsText("Was parallel");
        _bindingDriver.CheckIsHookExecuted("BeforeTestRun", 1);
        _bindingDriver.CheckIsHookExecuted("BeforeFeature", 10);
        _bindingDriver.CheckIsHookExecuted("AfterFeature", 10);
        _bindingDriver.CheckIsHookExecuted("AfterTestRun", 1);
    }
}